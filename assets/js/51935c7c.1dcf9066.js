"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[946],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),s=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,h=u["".concat(d,".").concat(m)]||u[m]||p[m]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7362:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={id:"adapter-template",title:"Adapter Template"},d=void 0,s={unversionedId:"tutorial/adapters/adapter-template",id:"tutorial/adapters/adapter-template",isDocsHomePage:!1,title:"Adapter Template",description:"Description and scope of the new adapter. This is a template for the documentation of an Adapter.",source:"@site/docs/tutorial/adapters/Template.md",sourceDirName:"tutorial/adapters",slug:"/tutorial/adapters/adapter-template",permalink:"/docs/tutorial/adapters/adapter-template",editUrl:"https://github.com/openlawteam/tribute-contracts/edit/docs/website/docs/tutorial/adapters/Template.md",tags:[],version:"current",frontMatter:{id:"adapter-template",title:"Adapter Template"}},c=[{value:"Workflow",id:"workflow",children:[]},{value:"Access Flags",id:"access-flags",children:[{value:"DAORegistry",id:"daoregistry",children:[]},{value:"Bank Extension",id:"bank-extension",children:[]}]},{value:"Dependencies",id:"dependencies",children:[{value:"DaoRegistry",id:"daoregistry-1",children:[]},{value:"BankExtension",id:"bankextension",children:[]},{value:"Voting",id:"voting",children:[]}]},{value:"Structs",id:"structs",children:[{value:"MyStructX",id:"mystructx",children:[]}]},{value:"Storage",id:"storage",children:[{value:"varA",id:"vara",children:[]},{value:"_varN",id:"_varn",children:[]}]},{value:"Functions",id:"functions",children:[{value:"receive",id:"receive",children:[]},{value:"submitProposal",id:"submitproposal",children:[]}]},{value:"Events",id:"events",children:[{value:"KickedMember",id:"kickedmember",children:[]}]}],p={toc:c};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Description and scope of the new adapter. This is a template for the documentation of an Adapter."),(0,i.kt)("p",null,"Here you can provide a brief description of the adapter and what is the use-case covered by the implementation. It is also good to add the goal of the Adapter and what value it brings to the DAO."),(0,i.kt)("h2",{id:"workflow"},"Workflow"),(0,i.kt)("p",null,"An overview of the entire process executed by Adapter functions, the main interactions and routines covered/executed."),(0,i.kt)("h2",{id:"access-flags"},"Access Flags"),(0,i.kt)("p",null,"Specify which additional configurations are required to make this adapter work. For instance: needs access to the DAO members, needs access to the DAO Bank, relies on Adapter X, Y and Extension Z."),(0,i.kt)("h3",{id:"daoregistry"},"DAORegistry"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SUBMIT_PROPOSAL")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"x"),","),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"y"),","),(0,i.kt)("li",{parentName:"ul"},"...")),(0,i.kt)("h3",{id:"bank-extension"},"Bank Extension"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"WITHDRAW")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"INTERNAL_TRANSFER"))),(0,i.kt)("h2",{id:"dependencies"},"Dependencies"),(0,i.kt)("h3",{id:"daoregistry-1"},"DaoRegistry"),(0,i.kt)("h3",{id:"bankextension"},"BankExtension"),(0,i.kt)("h3",{id:"voting"},"Voting"),(0,i.kt)("h2",{id:"structs"},"Structs"),(0,i.kt)("h3",{id:"mystructx"},"MyStructX"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fieldA"),": the ..."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fieldB"),": the ..."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"..."),": the ...")),(0,i.kt)("h2",{id:"storage"},"Storage"),(0,i.kt)("p",null,"Describe each variable public and private of the adapter and what is the purpose of that variable. Start with the public variables, and let the private ones to the end."),(0,i.kt)("h3",{id:"vara"},"varA"),(0,i.kt)("p",null,"Keeps track of..."),(0,i.kt)("h3",{id:"_varn"},"_","varN"),(0,i.kt)("p",null,"Tracks ..."),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("p",null,"Describe the public and private functions signatures with proper documentation and clearly explain what each function does. Specify what are expected the arguments and pre-conditions to execute the functions. Also, provide what is the expected outcome, and start with the public functions."),(0,i.kt)("h3",{id:"receive"},"receive"),(0,i.kt)("p",null,"Receives eth. Reverts when ..."),(0,i.kt)("h3",{id:"submitproposal"},"submitProposal"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"    /**\n     * @notice Creates a guild kick proposal, opens it for voting, and sponsors it.\n     * @dev A member can not kick himself.\n     * @dev Only one kick per DAO can be executed at time.\n     * @dev Only members that have units can be kicked out.\n     * @dev Proposal ids can not be reused.\n     * @param dao The dao address.\n     * @param proposalId The guild kick proposal id.\n     * @param memberToKick The member address that should be kicked out of the DAO.\n     * @param data Additional information related to the kick proposal.\n     */\n    function submitProposal(\n        DaoRegistry dao,\n        bytes32 proposalId,\n        address memberToKick,\n        bytes calldata data\n    ) external override onlyMember(dao)\n")),(0,i.kt)("h2",{id:"events"},"Events"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"No events are emitted or")),(0,i.kt)("h3",{id:"kickedmember"},"KickedMember"),(0,i.kt)("p",null,"When the kick proposal was processed with success."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"event KickedMember(bytes32 proposalId, address member);"))))}u.isMDXComponent=!0}}]);