"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4208],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return h}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=l(t),h=a,f=p["".concat(s,".").concat(h)]||p[h]||u[h]||o;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var d={};for(var s in n)hasOwnProperty.call(n,s)&&(d[s]=n[s]);d.originalType=e,d.mdxType="string"==typeof e?e:a,i[1]=d;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6722:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return d},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],d={id:"erc1155-extension",title:"ERC1155"},s=void 0,l={unversionedId:"contracts/extensions/erc1155-extension",id:"contracts/extensions/erc1155-extension",isDocsHomePage:!1,title:"ERC1155",description:"An IERC1155Receiver contract manages the collection tokens that are ub the ERC1155 standard, so it can represent any number of fungible and non-fungible token types in the DAO extension.",source:"@site/docs/contracts/extensions/ERC1155.md",sourceDirName:"contracts/extensions",slug:"/contracts/extensions/erc1155-extension",permalink:"/docs/contracts/extensions/erc1155-extension",editUrl:"https://github.com/openlawteam/tribute-contracts/edit/docs/website/docs/contracts/extensions/ERC1155.md",tags:[],version:"current",frontMatter:{id:"erc1155-extension",title:"ERC1155"},sidebar:"docs",previous:{title:"ERC1271",permalink:"/docs/contracts/extensions/erc1271-extension"},next:{title:"Configuration",permalink:"/docs/contracts/adapters/configuration/configuration-adapter"}},c=[{value:"Access Flags",id:"access-flags",children:[]},{value:"Storage",id:"storage",children:[{value:"public initialized",id:"public-initialized",children:[]},{value:"public dao",id:"public-dao",children:[]},{value:"private _nfts",id:"private-_nfts",children:[]},{value:"private _nftTracker",id:"private-_nfttracker",children:[]},{value:"private _ownership",id:"private-_ownership",children:[]},{value:"private _nftAddresses",id:"private-_nftaddresses",children:[]}]},{value:"Dependencies",id:"dependencies",children:[{value:"DaoRegistry",id:"daoregistry",children:[]}]},{value:"Functions",id:"functions",children:[{value:"collect",id:"collect",children:[]},{value:"withdrawNFT",id:"withdrawnft",children:[]},{value:"internalTransfer",id:"internaltransfer",children:[]},{value:"getNFTId",id:"getnftid",children:[]},{value:"getNFTIdAmount",id:"getnftidamount",children:[]},{value:"nbNFTs",id:"nbnfts",children:[]},{value:"getNFT",id:"getnft",children:[]},{value:"nbNFTAddresses",id:"nbnftaddresses",children:[]},{value:"getNFTAddress",id:"getnftaddress",children:[]},{value:"getNFTOwner",id:"getnftowner",children:[]},{value:"nbNFTOwners",id:"nbnftowners",children:[]},{value:"_saveNFT",id:"_savenft",children:[]},{value:"onERC1155Received",id:"onerc1155received",children:[]},{value:"onERC1155BatchReceived",id:"onerc1155batchreceived",children:[]},{value:"supportsInterface",id:"supportsinterface",children:[]},{value:"_updateTokenAmount",id:"_updatetokenamount",children:[]},{value:"_getTokenAmount",id:"_gettokenamount",children:[]}]},{value:"Events",id:"events",children:[{value:"CollectedNFT",id:"collectednft",children:[]},{value:"WithdrawnNFT",id:"withdrawnnft",children:[]},{value:"TransferredNFT",id:"transferrednft",children:[]}]}],u={toc:c};function p(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"An ",(0,o.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/3.x/erc1155"},"IERC1155Receiver")," contract manages the collection tokens that are ub the ",(0,o.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1155"},"ERC1155 standard"),", so it can represent any number of fungible and non-fungible token types in the DAO extension."),(0,o.kt)("p",null,"In other words, the DAO becomes capable of managing and curating a collection of multi tokens in ERC1155 standard, and it allows for each token ID to represent a new configurable token type, which may have its own metadata, supply and other attributes."),(0,o.kt)("h2",{id:"access-flags"},"Access Flags"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WITHDRAW_NFT"),": Allows the caller to remove the NFT from the GUILD collection and return it to a new owner."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"INTERNAL_TRANSFER"),": Allows the caller to update the internal ownership of the NFT within the GUILD collection.")),(0,o.kt)("h2",{id:"storage"},"Storage"),(0,o.kt)("h3",{id:"public-initialized"},"public initialized"),(0,o.kt)("p",null,"Internally tracks deployment under eip-1167 proxy pattern."),(0,o.kt)("h3",{id:"public-dao"},"public dao"),(0,o.kt)("p",null,"Keeps track of each DAO instance the current contract belongs to."),(0,o.kt)("h3",{id:"private-_nfts"},"private ","_","nfts"),(0,o.kt)("p",null,"Tracks all the Token IDs that belong to an NFT address stored in the GUILD collection."),(0,o.kt)("h3",{id:"private-_nfttracker"},"private ","_","nftTracker"),(0,o.kt)("p",null,"Tracks the address of the Owner to the NFT address, the NFT's corresponding Token ID and the Amount of that particular Token Id held by Owner."),(0,o.kt)("h3",{id:"private-_ownership"},"private ","_","ownership"),(0,o.kt)("p",null,"Tracks the internal owner of record of an NFT that has been transferred to the extension."),(0,o.kt)("h3",{id:"private-_nftaddresses"},"private ","_","nftAddresses"),(0,o.kt)("p",null,"Tracks all the NFTs addresses collected and stored in the GUILD collection."),(0,o.kt)("h2",{id:"dependencies"},"Dependencies"),(0,o.kt)("h3",{id:"daoregistry"},"DaoRegistry"),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("h3",{id:"collect"},"collect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solitidy"},"/**\n  * @notice Collects the NFT from the owner and moves it to the NFT extension.\n  * @notice It must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n  * @dev Reverts if the NFT is not in ERC1155 standard.\n  * @param owner The actual owner of the NFT that will get collected.\n  * @param nftAddr The NFT contract address.\n  * @param nftTokenId The NFT token id.\n  * @param amount The amount of NFT with nftTokenId to be collected.\n  */\nfunction collect(\n    address owner,\n    address nftAddr,\n    uint256 nftTokenId,\n    uint256 amount\n) external hasExtensionAccess(this, AclFlag.COLLECT_NFT)\n")),(0,o.kt)("h3",{id:"withdrawnft"},"withdrawNFT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Transfers the NFT token from the extension address to the new owner.\n  * @notice It also updates the internal state to keep track of the all the NFTs collected by the extension.\n  * @notice The caller must have the ACL Flag: WITHDRAW_NFT\n  * @notice This function needs to be called from a new adapter (RagequitNFT) that will manage the Bank balances, and will return the NFT to the owner.\n  * @dev Reverts if the NFT is not in ERC1155 standard.\n  * @param newOwner The address of the new owner that will receive the NFT.\n  * @param nftAddr The NFT address that must be in ERC1155 standard.\n  * @param nftTokenId The NFT token id.\n  * @param amount The NFT token id amount to withdraw.\n  */\nfunction withdrawNFT(\n    address newOwner,\n    address nftAddr,\n    uint256 nftTokenId,\n    uint256 amount\n) external hasExtensionAccess(this, AclFlag.WITHDRAW_NFT)\n")),(0,o.kt)("h3",{id:"internaltransfer"},"internalTransfer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Updates internally the ownership of the NFT.\n  * @notice The caller must have the ACL Flag: INTERNAL_TRANSFER\n  * @dev Reverts if the NFT is not already internally owned in the extension.\n  * @param fromOwner The address of the current owner.\n  * @param toOwner The address of the new owner.\n  * @param nftAddr The NFT address.\n  * @param nftTokenId The NFT token id.\n  * @param amount the number of a particular NFT token id.\n  */\nfunction internalTransfer(\n    address fromOwner,\n    address toOwner,\n    address nftAddr,\n    uint256 nftTokenId,\n    uint256 amount\n) external hasExtensionAccess(this, AclFlag.INTERNAL_TRANSFER)\n")),(0,o.kt)("h3",{id:"getnftid"},"getNFTId"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Gets ID generated from an NFT address and token id (used internally to map ownership).\n  * @param nftAddress The NFT address.\n  * @param tokenId The NFT token id.\n  */\nfunction getNFTId(address nftAddress, uint256 tokenId)\n    public\n    pure\n    returns (bytes32)\n")),(0,o.kt)("h3",{id:"getnftidamount"},"getNFTIdAmount"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice gets owner's amount of a TokenId for an NFT address.\n  * @param owner eth address\n  * @param tokenAddr the NFT address.\n  * @param tokenId The NFT token id.\n  */\nfunction getNFTIdAmount(\n    address owner,\n    address tokenAddr,\n    uint256 tokenId\n) public view returns (uint256)\n")),(0,o.kt)("h3",{id:"nbnfts"},"nbNFTs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Returns the total amount of token ids collected for an NFT address.\n  * @param tokenAddr The NFT address.\n  */\nfunction nbNFTs(address tokenAddr) public view returns (uint256)\n")),(0,o.kt)("h3",{id:"getnft"},"getNFT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Returns token id associated with an NFT address stored in the GUILD collection at the specified index.\n  * @param tokenAddr The NFT address.\n  * @param index The index to get the token id if it exists.\n  */\nfunction getNFT(address tokenAddr, uint256 index)\n    public\n    view\n    returns (uint256)\n")),(0,o.kt)("h3",{id:"nbnftaddresses"},"nbNFTAddresses"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Returns the total amount of NFT addresses collected.\n  */\nfunction nbNFTAddresses() external view returns (uint256)\n")),(0,o.kt)("h3",{id:"getnftaddress"},"getNFTAddress"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Returns NFT address stored in the GUILD collection at the specified index.\n  * @param index The index to get the NFT address if it exists.\n  */\nfunction getNFTAddress(uint256 index) external view returns (address)\n")),(0,o.kt)("h3",{id:"getnftowner"},"getNFTOwner"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Returns owner of NFT that has been transferred to the extension.\n  * @param nftAddress The NFT address.\n  * @param tokenId The NFT token id.\n  */\nfunction getNFTOwner(\n    address nftAddress,\n    uint256 tokenId,\n    uint256 index\n) public view returns (address)\n")),(0,o.kt)("h3",{id:"nbnftowners"},"nbNFTOwners"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Returns the total number of owners of an NFT addresses and token id collected.\n  */\nfunction nbNFTOwners(address nftAddress, uint256 tokenId)\n    external\n    view\n    returns (uint256)\n")),(0,o.kt)("h3",{id:"_savenft"},"_","saveNFT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Helper function to update the extension states for an NFT collected by the extension.\n  * @param nftAddr The NFT address.\n  * @param nftTokenId The token id.\n  * @param owner The address of the owner.\n  * @param amount of the tokenID\n  */\nfunction _saveNft(\n    address nftAddr,\n    uint256 nftTokenId,\n    address owner,\n    uint256 amount\n) private\n")),(0,o.kt)("h3",{id:"onerc1155received"},"onERC1155Received"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  *  @notice required function from IERC1155 standard to be able to to receive tokens\n  */\nfunction onERC1155Received(\n    address,\n    address,\n    uint256,\n    uint256,\n    bytes calldata\n) external pure override returns (bytes4)\n")),(0,o.kt)("h3",{id:"onerc1155batchreceived"},"onERC1155BatchReceived"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  *  @notice required function from IERC1155 standard to be able to to batch receive tokens\n  *  @dev this function is currently not supported in this extension and will revert\n  */\nfunction onERC1155BatchReceived(\n    address,\n    address,\n    uint256[] calldata,\n    uint256[] calldata,\n    bytes calldata\n) external pure override returns (bytes4)\n")),(0,o.kt)("h3",{id:"supportsinterface"},"supportsInterface"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Supports ERC-165 & ERC-1155 interfaces only.\n  * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md\n  */\nfunction supportsInterface(bytes4 interfaceID)\n    external\n    pure\n    override\n    returns (bool)\n")),(0,o.kt)("h3",{id:"_updatetokenamount"},"_","updateTokenAmount"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  *  @notice internal function to update the amount of a tokenID for an NFT an owner has\n  */\nfunction _updateTokenAmount(\n    address owner,\n    address nft,\n    uint256 tokenId,\n    uint256 amount\n) internal\n")),(0,o.kt)("h3",{id:"_gettokenamount"},"_","getTokenAmount"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidiity"},"/**\n  *  @notice internal function to get the amount of a tokenID for an NFT an owner has\n  */\nfunction _getTokenAmount(\n    address owner,\n    address nft,\n    uint256 tokenId\n) internal view returns (uint256)\n")),(0,o.kt)("h2",{id:"events"},"Events"),(0,o.kt)("h3",{id:"collectednft"},"CollectedNFT"),(0,o.kt)("p",null,"When a NFT is collected/stored into the NFT collection."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"event CollectedNFT(address nftAddr, uint256 nftTokenId, uint256 amount);"))),(0,o.kt)("h3",{id:"withdrawnnft"},"WithdrawnNFT"),(0,o.kt)("p",null,"When a NFT is transferred from the extension to another owner."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"event WithdrawnNFT(address nftAddr, uint256 nftTokenId, ,uint amount,address toAddress);"))),(0,o.kt)("h3",{id:"transferrednft"},"TransferredNFT"),(0,o.kt)("p",null,"When a NFT is transferred from the escrow adapter to the NFT collection in the extension."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"event TransferredNFT(address oldOwner, address newOwner, address nftAddr, uint256 nftTokenId, uint256 amount );"))))}p.isMDXComponent=!0}}]);